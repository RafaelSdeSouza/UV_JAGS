pi_w <- runif(100,-2,-0.3333)
pi_m <- runif(100,-20,-18)
pi_om
require(ggridges);require(dplyr)
pi_om <- runif(100,0.01,0.307) %>% mutate(.,par = om)
runif(100,0.01,0.307) %>% as_tibble() %>% mutate(.,par = om)
runif(100,0.01,0.307) %>% as_tibble() %>% mutate(.,par = "om")
pi_om <- runif(1000,0.01,0.307) %>% as_tibble() %>% mutate(.,par = "om")
pi_w <- runif(100,-2,-0.3333) %>% as_tibble() %>% mutate(.,par = "w")
pi_m <- runif(100,-20,-18)  %>% as_tibble() %>% mutate(.,par = "m")
priors <- cbind(pi_om,pi_w,pi_m)
pi_om <- runif(1000,0.01,0.307) %>% as_tibble() %>% mutate(.,par = "om")
pi_w <- runif(1000,-2,-0.3333) %>% as_tibble() %>% mutate(.,par = "w")
pi_m <- runif(1000,-20,-18)  %>% as_tibble() %>% mutate(.,par = "m")
priors <- cbind(pi_om,pi_w,pi_m)
#omega_m  =  0.01    0.307    0.6 (Planck / Scolnic2017)
#h0  =  0.7324 (Riess2016)
#w  =  -2.0 -1.026 -0.3333 (-1.026 from Planck /Scolnic2017, and lower limit -2.0 due to the relation to the upper limit of omega_m)
#omega_b  =  0.04 (Isn't really used)
#omega_k  =  0.0
#m  =  -20.0  -19.248   -18.0 (-19.248 from a maxlike run on Pantheon)
require(ggridges);require(dplyr)
pi_om <- runif(1000,0.01,0.307) %>% as_tibble() %>% mutate(.,par = "om")
pi_w <- runif(1000,-2,-0.3333) %>% as_tibble() %>% mutate(.,par = "w")
pi_m <- runif(1000,-20,-18)  %>% as_tibble() %>% mutate(.,par = "m")
priors <- cbind(pi_om,pi_w,pi_m)
priors <- rbind(pi_om,pi_w,pi_m)
head(priors)
ggplot(priors, aes(x = value, y = par, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ")))
require(ggthemes)
ggplot(priors, aes(x = value, y = par, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ")))
pi_om <- runif(1e4,0.01,0.307) %>% as_tibble() %>% mutate(.,par = "om")
pi_w <- runif(1e4,-2,-0.3333) %>% as_tibble() %>% mutate(.,par = "w")
pi_m <- runif(1e4,-20,-18)  %>% as_tibble() %>% mutate(.,par = "m")
priors <- rbind(pi_om,pi_w,pi_m)
ggplot(priors, aes(x = value, y = par, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ")))
pi_ho <- runif(1e4,0.7324,0.7324)
priors <- rbind(pi_om,pi_ho,pi_w)
ggplot(priors, aes(x = value, y = par, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ")))
pi_om <- runif(1e4,0.01,0.307) %>% as_tibble() %>% mutate(.,par = "om")
pi_ho <- runif(1e4,0.7324,0.7324) %>% as_tibble() %>% mutate(.,par = "H0")
pi_w <- runif(1e4,-2,-0.3333) %>% as_tibble() %>% mutate(.,par = "w")
pi_m <- runif(1e4,-20,-18)  %>% as_tibble() %>% mutate(.,par = "m")
priors <- rbind(pi_om,pi_ho,pi_w)
ggplot(priors, aes(x = value, y = par, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ")))
ggplot(priors, aes(x = value, y = par, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient") +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ")))
ggplot(priors, aes(x = value, y = par)) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient") +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ")))
ggplot(priors, aes(x = value, y = par)) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient") +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Priors")))
ggplot(priors, aes(x = value, y = par)) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
geom_density_ridges(stat = "binline", bins = 20, scale = 0.95, draw_baseline = FALSE)+
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Priors")))
ggplot(priors, aes(x = value, y = par)) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
geom_density_ridges(stat = "binline", bins = 50,  draw_baseline = FALSE)+
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab
ggplot(priors, aes(x = value, y = par)) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
geom_density_ridges(stat = "binline", bins = 50)+
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Priors")))
ggplot(priors, aes(x = value, y = par)) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
geom_density_ridges(stat = "binline", bins = 1)+
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Priors")))
ggplot(priors, aes(x = value, y = par)) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
geom_density_ridges(stat = "binline", bins = 3)+
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Priors")))
ggplot(priors, aes(x = value, y = par)) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
geom_density_ridges(stat = "binline", bins = 100)+
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Priors")))
x_om <- seq(0.01,0.307,length.out = 100)
dunif(x_om)
plot(x_om,phi_om)
plot(x_om,dunif(x_om))
(142 + 40)/142
(121 + 40)/121
(27 + 142)/142
(27 + 121)/121
setwd("~/Documents/GitHub/UV")
# ADA8 – Astronomical Data Analysis Summer School
# Bayesian tutorial by Rafael S. de Souza - ELTE, Hungary & COIN
#
# Partial example from Bayesian Models for Astrophysical Data
# by Hilbe, de Souza & Ishida, 2016, Cambridge Univ. Press
#
# Example of Bayesian Bernoulli regression in R using JAGS
# real data from Biffi and Maio, 2013 - http://adsabs.harvard.edu/cgi-bin/bib_query?arXiv:1309.2283
#
# 1 response (y): star formation
# 1 explanatory variable (x1): molecular fraction
require(R2jags)
require(ggplot2)
source("..//Auxiliar_functions/jagsresults.R")
# read data
SFR_dat<-read.csv("https://raw.githubusercontent.com/RafaelSdeSouza/ADA8/master/astro_data/SFR.csv")
x1 <- log(SFR_dat$Xmol,10)
by <- SFR_dat$SFR
nobs <- nrow(SFR_dat)
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# Construct data dictionary
logitmod <-data.frame(by, x1)
X <- model.matrix(~ 1+x1+I(x1^2)+I(x1^3),
data = logitmod)
XX <- model.matrix(~1+xx+I(xx^2)+I(xx^3))
K <- ncol(X)
logit_data <- list(Y  = logitmod$by, # Response variable
X  = X,           # Predictors
K  = K,           # Number of Predictors including the intercept
N  = nobs,        # Sample size
XX = XX,
M = M
)
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-inprod(beta[], XX[j,])
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 8000)
# check results
jagsresults(x=jagsfit, params=c("beta"))
# Bin data for visualization
binx<-0.5
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
# Plot
y <- jagsresults(x=jagsfit, params=c('px'))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],upr1=y[,"75%"],upr2=y[,"97.5%"])
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1.25,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=3,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),
colour="blue",width=0.01)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))+ylab("Probability of star formation activity")+
theme(axis.title=element_text(size=25))
setwd("~/Documents/GitHub/UV")
# ADA8 – Astronomical Data Analysis Summer School
# Bayesian tutorial by Rafael S. de Souza - ELTE, Hungary & COIN
#
# Partial example from Bayesian Models for Astrophysical Data
# by Hilbe, de Souza & Ishida, 2016, Cambridge Univ. Press
#
# Example of Bayesian Bernoulli regression in R using JAGS
# real data from Biffi and Maio, 2013 - http://adsabs.harvard.edu/cgi-bin/bib_query?arXiv:1309.2283
#
# 1 response (y): star formation
# 1 explanatory variable (x1): molecular fraction
require(R2jags)
require(ggplot2)
source("..//Auxiliar_functions/jagsresults.R")
# read data
SFR_dat<-read.csv("https://raw.githubusercontent.com/RafaelSdeSouza/ADA8/master/astro_data/SFR.csv")
x1 <- log(SFR_dat$Xmol,10)
by <- SFR_dat$SFR
nobs <- nrow(SFR_dat)
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# Construct data dictionary
logitmod <-data.frame(by, x1)
X <- model.matrix(~ 1+x1+I(x1^2)+I(x1^3),
data = logitmod)
XX <- model.matrix(~1+xx+I(xx^2)+I(xx^3))
K <- ncol(X)
logit_data <- list(Y  = logitmod$by, # Response variable
X  = X,           # Predictors
K  = K,           # Number of Predictors including the intercept
N  = nobs,        # Sample size
XX = XX,
M = M
)
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-inprod(beta[], XX[j,])
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 8000)
# check results
jagsresults(x=jagsfit, params=c("beta"))
# Bin data for visualization
binx<-0.5
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
# Plot
y <- jagsresults(x=jagsfit, params=c('px'))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],upr1=y[,"75%"],upr2=y[,"97.5%"])
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1.25,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=3,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),
colour="blue",width=0.01)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))+ylab("Probability of star formation activity")+
theme(axis.title=element_text(size=25))
